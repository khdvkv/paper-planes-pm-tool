"""
Paper Planes PM Tool - Streamlit Application
Main entry point for the web application
"""
import streamlit as st
import pandas as pd
import io
import yaml
from datetime import datetime, date
import streamlit_authenticator as stauth
from database.connection import get_db, init_db
from database.models import (
    Project, Methodology, ProjectDocument, PaymentStage, MethodologySelection,
    Deliverable, TaskDependency, SetupChecklistItem, SETUP_CHECKLIST_ITEMS, SETUP_APPROVERS
)
from database.init_data import import_methodologies
from api.claude_client import get_claude_client
from api.project_generator import get_project_generator
from api.google_drive_client import get_google_drive_client

# Page configuration
st.set_page_config(
    page_title="Paper Planes PM Tool",
    page_icon="‚úàÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize database on first run
@st.cache_resource
def initialize_database():
    """Initialize database and import methodologies"""
    init_db()
    import_methodologies()
    return True

# Load authentication config
@st.cache_resource
def load_auth_config():
    """Load authentication configuration"""
    # Try to load from Streamlit Secrets first (for cloud deployment)
    try:
        if hasattr(st, 'secrets') and 'credentials' in st.secrets:
            # Convert st.secrets to dict format expected by streamlit-authenticator
            config = {
                'credentials': st.secrets['credentials'].to_dict(),
                'cookie': st.secrets.get('cookie', {
                    'expiry_days': 30,
                    'key': 'paperplanes_auth_key',
                    'name': 'paperplanes_auth_cookie'
                }).to_dict() if hasattr(st.secrets.get('cookie', {}), 'to_dict') else st.secrets.get('cookie', {
                    'expiry_days': 30,
                    'key': 'paperplanes_auth_key',
                    'name': 'paperplanes_auth_cookie'
                }),
                'preauthorized': st.secrets.get('preauthorized', {'emails': []}).to_dict() if hasattr(st.secrets.get('preauthorized', {}), 'to_dict') else st.secrets.get('preauthorized', {'emails': []})
            }
            return config
    except (ImportError, KeyError, AttributeError):
        pass

    # Fall back to config.yaml file
    with open('config.yaml') as file:
        config = yaml.load(file, Loader=yaml.SafeLoader)
    return config

# Initialize
initialize_database()


def main():
    """Main application"""

    # Header
    st.title("‚úàÔ∏è Paper Planes PM Tool")
    st.markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ Paper Planes")

    # Sidebar
    with st.sidebar:
        st.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        page = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
            ["üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
            label_visibility="collapsed"
        )

    # Route to pages
    if page == "üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã":
        show_all_projects()
    elif page == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
        show_create_project()
    elif page == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics()


def show_all_projects():
    """Show all projects table with extended registry information"""
    st.header("üìä –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")

    # Get projects from database
    db = get_db()
    projects = db.query(Project).order_by(Project.created_at.desc()).all()
    db.close()

    if not projects:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç!")
        return

    # Convert to DataFrame with extended columns
    data = []
    for proj in projects:
        # Calculate days remaining if dates available
        days_to_end = None
        if proj.contract_project_end_date:
            from datetime import date
            days_to_end = (proj.contract_project_end_date - date.today()).days

        data.append({
            "–ö–æ–¥": proj.project_code,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": proj.name,
            "–ö–ª–∏–µ–Ω—Ç": proj.client,
            "–ì—Ä—É–ø–ø–∞": "üü¢ –ü—Ä–∞–≤–∞—è" if proj.group == "right" else "üîµ –õ–µ–≤–∞—è",
            "–°—Ç–∞—Ç—É—Å": proj.status,
            "–°—Ç–∞—Ä—Ç": proj.start_date.strftime("%d.%m.%Y") if proj.start_date else "",
            "–û–∫–æ–Ω—á–∞–Ω–∏–µ": proj.contract_project_end_date.strftime("%d.%m.%Y") if proj.contract_project_end_date else proj.end_date.strftime("%d.%m.%Y"),
            "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π": days_to_end if days_to_end is not None else None,
            "–ù–µ–¥–µ–ª—å": proj.duration_weeks or proj.phase_duration_weeks,
            "üìÅ –ü–∞–ø–∫–∞": proj.google_drive_folder_url if proj.google_drive_folder_url else None,
            "üìÑ –ê–¥–º–∏–Ω—à–∫–∞–ª–∞": proj.adminscale_url if proj.adminscale_url else None,
            "üìä PERT": proj.pert_url if proj.pert_url else None,
            "üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø—Ä–æ–±–ª–µ–º": proj.problem_map_url if proj.problem_map_url else None,
            "_project_id": proj.id  # Hidden column for selection
        })

    df = pd.DataFrame(data)

    # Filters
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        search = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç—É")
    with col2:
        status_filter = st.multiselect(
            "–°—Ç–∞—Ç—É—Å",
            ["draft", "setup", "active", "completed", "archived"],
            default=["setup", "active"]
        )
    with col3:
        group_filter = st.multiselect(
            "–ì—Ä—É–ø–ø–∞",
            ["üü¢ –ü—Ä–∞–≤–∞—è", "üîµ –õ–µ–≤–∞—è"],
            default=["üü¢ –ü—Ä–∞–≤–∞—è", "üîµ –õ–µ–≤–∞—è"]
        )
    with col4:
        st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", len(projects))

    # Apply filters
    df_filtered = df.copy()
    if search:
        df_filtered = df_filtered[
            df_filtered["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.contains(search, case=False, na=False) |
            df_filtered["–ö–ª–∏–µ–Ω—Ç"].str.contains(search, case=False, na=False)
        ]
    if status_filter:
        df_filtered = df_filtered[df_filtered["–°—Ç–∞—Ç—É—Å"].isin(status_filter)]
    if group_filter:
        df_filtered = df_filtered[df_filtered["–ì—Ä—É–ø–ø–∞"].isin(group_filter)]

    st.caption(f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(df_filtered)} –∏–∑ {len(df)}")

    # Display table with links
    st.dataframe(
        df_filtered.drop(columns=["_project_id"]),
        use_container_width=True,
        hide_index=True,
        column_config={
            "–ö–æ–¥": st.column_config.TextColumn(
                "–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞",
                width="medium",
                help="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞"
            ),
            "–ù–∞–∑–≤–∞–Ω–∏–µ": st.column_config.TextColumn(
                "–ù–∞–∑–≤–∞–Ω–∏–µ",
                width="large"
            ),
            "–ì—Ä—É–ø–ø–∞": st.column_config.TextColumn(
                "–ì—Ä—É–ø–ø–∞",
                width="small"
            ),
            "–°—Ç–∞—Ç—É—Å": st.column_config.TextColumn(
                "–°—Ç–∞—Ç—É—Å",
                width="small",
                help="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"
            ),
            "–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π": st.column_config.NumberColumn(
                "–î–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞",
                width="small",
                help="–î–Ω–µ–π –¥–æ –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"
            ),
            "–ù–µ–¥–µ–ª—å": st.column_config.NumberColumn(
                "–ù–µ–¥–µ–ª—å",
                width="small",
                help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –Ω–µ–¥–µ–ª—è—Ö"
            ),
            "üìÅ –ü–∞–ø–∫–∞": st.column_config.LinkColumn(
                "üìÅ –ü–∞–ø–∫–∞",
                width="small",
                help="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É –≤ Google Drive",
                display_text="–û—Ç–∫—Ä—ã—Ç—å"
            ),
            "üìÑ –ê–¥–º–∏–Ω—à–∫–∞–ª–∞": st.column_config.LinkColumn(
                "üìÑ –ê–¥–º–∏–Ω—à–∫–∞–ª–∞",
                width="small",
                help="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω—à–∫–∞–ª—É –ø—Ä–æ–µ–∫—Ç–∞",
                display_text="–û—Ç–∫—Ä—ã—Ç—å"
            ),
            "üìä PERT": st.column_config.LinkColumn(
                "üìä PERT",
                width="small",
                help="–°—Å—ã–ª–∫–∞ –Ω–∞ PERT-–¥–∏–∞–≥—Ä–∞–º–º—É",
                display_text="–û—Ç–∫—Ä—ã—Ç—å"
            ),
            "üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø—Ä–æ–±–ª–µ–º": st.column_config.LinkColumn(
                "üó∫Ô∏è –ö–∞—Ä—Ç–∞",
                width="small",
                help="–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É –ø—Ä–æ–±–ª–µ–º",
                display_text="–û—Ç–∫—Ä—ã—Ç—å"
            )
        }
    )


def show_create_project():
    """Show create project form with multi-step process"""
    st.header("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")

    # Initialize session state for multi-step form
    if "create_step" not in st.session_state:
        st.session_state.create_step = 1
    if "project_data" not in st.session_state:
        st.session_state.project_data = {}
    if "extracted_data" not in st.session_state:
        st.session_state.extracted_data = None

    # Progress indicator
    st.progress((st.session_state.create_step - 1) / 3)
    st.caption(f"–®–∞–≥ {st.session_state.create_step} –∏–∑ 4")

    # Step 1: Basic Information
    if st.session_state.create_step == 1:
        show_step1_basic_info()

    # Step 2: Upload Contract & AI Extraction
    elif st.session_state.create_step == 2:
        show_step2_contract_upload()

    # Step 3: Project Planning
    elif st.session_state.create_step == 3:
        show_step3_planning()

    # Step 4: Review & Create
    elif st.session_state.create_step == 4:
        show_step4_review_create()


def show_step1_basic_info():
    """Step 1: Basic project information"""
    st.subheader("–®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    col1, col2 = st.columns(2)

    with col1:
        project_name = st.text_input(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *",
            value=st.session_state.project_data.get("name", ""),
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ú–ò–°",
            help="–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
        )

        client_name = st.text_input(
            "–ö–ª–∏–µ–Ω—Ç *",
            value=st.session_state.project_data.get("client", ""),
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–¥IQ",
            help="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"
        )

        start_date = st.date_input(
            "–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ *",
            value=st.session_state.project_data.get("start_date", datetime.now().date()),
            help="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        )

        # Group selection
        group = st.selectbox(
            "–ì—Ä—É–ø–ø–∞ *",
            options=["left", "right"],
            format_func=lambda x: "–õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞" if x == "left" else "–ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞",
            index=0 if st.session_state.project_data.get("group", "left") == "left" else 1,
            help="–¶–µ–Ω—Ç—Ä –ø—Ä–∏–±—ã–ª–∏, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø—Ä–æ–µ–∫—Ç"
        )

    with col2:
        end_date = st.date_input(
            "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è *",
            value=st.session_state.project_data.get("end_date", datetime.now().date()),
            help="–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )

        # Project type selection
        project_type = st.selectbox(
            "–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ *",
            options=["new", "existing"],
            format_func=lambda x: "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç" if x == "new" else "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç",
            index=0 if st.session_state.project_data.get("project_type", "new") == "new" else 1,
            help="–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"
        )

        st.markdown("**Project Code**")

        # Generate project code button
        if st.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å project code", use_container_width=True):
            if client_name:
                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é project code —Å –ø–æ–º–æ—â—å—é AI..."):
                    try:
                        db = get_db()
                        last_project = db.query(Project).order_by(Project.id.desc()).first()
                        db.close()

                        last_code = last_project.project_code.split(".")[0] if last_project else "2167"

                        claude_client = get_claude_client()
                        result = claude_client.generate_project_code(client_name, last_code)

                        st.session_state.project_data["project_code"] = result["project_code"]
                        st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {result['project_code']}")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")

        # Show generated code
        if "project_code" in st.session_state.project_data:
            st.info(f"üìå **Project Code:** `{st.session_state.project_data['project_code']}`")

    st.markdown("---")

    # Next button
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚û°Ô∏è –î–∞–ª–µ–µ", type="primary", use_container_width=True):
            # Validation
            if not all([project_name, client_name, start_date, end_date]):
                st.error("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                return

            if end_date < start_date:
                st.error("‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞")
                return

            if "project_code" not in st.session_state.project_data:
                st.error("‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ project code")
                return

            # Save data
            st.session_state.project_data.update({
                "name": project_name,
                "client": client_name,
                "start_date": start_date,
                "end_date": end_date,
                "group": group,
                "project_type": project_type
            })

            # Move to next step
            st.session_state.create_step = 2
            st.rerun()


def show_step2_contract_upload():
    """Step 2: Upload contract and extract data with AI"""
    st.subheader("–®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞")

    st.info("üìù –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

    # Text input field (primary method)
    st.markdown("### üìÑ –¢–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞")
    contract_text_input = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:",
        value=st.session_state.project_data.get("contract_text_input", ""),
        height=300,
        placeholder="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞...",
        help="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ —Å—é–¥–∞. AI –±—É–¥–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ–ª—è."
    )

    # File upload (required, for Google Drive storage)
    st.markdown("---")
    st.markdown("### üìé –§–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞")
    st.caption("–§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Drive, –Ω–æ AI –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è –≤—ã—à–µ")

    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤–µ:",
        type=["pdf", "txt", "docx"],
        help="–§–∞–π–ª –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤–µ –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
    )

    # Save filename if uploaded
    if uploaded_file:
        st.session_state.project_data["contract_filename"] = uploaded_file.name
        st.success(f"‚úÖ –§–∞–π–ª {uploaded_file.name} –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ –ø—Ä–æ–µ–∫—Ç–∞")

    # Proposal upload
    st.markdown("---")
    st.markdown("### üìÑ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–ö–ü)")
    st.caption("PDF —Ñ–∞–π–ª –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∞")

    proposal_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ö–ü:",
        type=["pdf"],
        help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ–∞–π–ª –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
        key="proposal_uploader"
    )

    if proposal_file:
        st.session_state.project_data["proposal_filename"] = proposal_file.name
        st.success(f"‚úÖ –ö–ü {proposal_file.name} –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ")

    # Sales notes - Granola recording link
    st.markdown("---")
    st.markdown("### üìù –ó–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á –ø–æ –ø—Ä–æ–¥–∞–∂–µ")
    st.caption("–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏ –≤ Granola (–∏–ª–∏ –¥—Ä—É–≥–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏)")

    sales_notes_url = st.text_input(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏:",
        value=st.session_state.project_data.get("sales_notes_url", ""),
        placeholder="https://granola.ai/recording/...",
        help="–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏ (Granola, Otter.ai –∏ —Ç.–¥.)",
        key="sales_notes_url_input"
    )

    if sales_notes_url:
        st.session_state.project_data["sales_notes_url"] = sales_notes_url

    # Transcript text area
    st.markdown("#### –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏")
    st.caption("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–∑ Granola —Å—é–¥–∞")

    sales_transcript = st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é:",
        value=st.session_state.project_data.get("sales_transcript", ""),
        height=250,
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏...\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n[00:00] –ò–≤–∞–Ω: –î–æ–±—Ä—ã–π –¥–µ–Ω—å...\n[00:15] –ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É –Ω–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∞...",
        help="–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI",
        key="sales_transcript_input"
    )

    if sales_transcript:
        st.session_state.project_data["sales_transcript"] = sales_transcript
        # Save combined data to sales_notes
        notes_content = ""
        if sales_notes_url:
            notes_content += f"–ó–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∏: {sales_notes_url}\n\n"
        notes_content += sales_transcript
        st.session_state.project_data["sales_notes"] = notes_content

    # Project specifics
    st.markdown("---")
    st.markdown("### üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞)")
    st.caption("–í–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ä–∏—Å–∫–∏, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞")

    project_specifics = st.text_area(
        "–û–ø–∏—à–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
        value=st.session_state.project_data.get("project_specifics", ""),
        height=150,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä:\n- –ö–ª–∏–µ–Ω—Ç –æ—á–µ–Ω—å —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫ —Å—Ä–æ–∫–∞–º\n- –ï—Å—Ç—å —Ä–∏—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è scope\n- –í–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...",
        help="–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥–µ",
        key="project_specifics_input"
    )

    if project_specifics:
        st.session_state.project_data["project_specifics"] = project_specifics

    st.markdown("---")

    # AI extraction button
    if contract_text_input:
        if st.button("ü§ñ –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é AI", type="primary", use_container_width=True):
            with st.spinner("Claude –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–≥–æ–≤–æ—Ä... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥"):
                try:
                    claude_client = get_claude_client()
                    extracted = claude_client.extract_contract_data(contract_text_input)

                    st.session_state.extracted_data = extracted
                    st.session_state.project_data["contract_text"] = contract_text_input
                    st.session_state.project_data["contract_text_input"] = contract_text_input

                    st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã! –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {extracted.get('confidence_score', 0)}%")
                    st.rerun()

                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –≤ –ø–æ–ª–µ –≤—ã—à–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    # Show extracted data
    if st.session_state.extracted_data:
        st.markdown("### üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

        data = st.session_state.extracted_data

        # Budget
        if "budget" in data:
            st.markdown("#### üí∞ –§–∏–Ω–∞–Ω—Å—ã")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ë—é–¥–∂–µ—Ç", f"{data['budget']['total']:,.0f} {data['budget']['currency']}")
            with col2:
                st.metric("–ù–î–°", f"{data['budget']['vat_rate']}%" if data['budget'].get('vat_included') else "–ë–µ–∑ –ù–î–°")
            with col3:
                if "duration" in data and "weeks" in data["duration"]:
                    st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{data['duration']['weeks']} –Ω–µ–¥")

        # Payment stages
        if "payment_stages" in data and data["payment_stages"]:
            st.markdown("#### üí≥ –≠—Ç–∞–ø—ã –æ–ø–ª–∞—Ç—ã")
            stages_df = pd.DataFrame(data["payment_stages"])
            st.dataframe(stages_df, use_container_width=True, hide_index=True)

        # Deliverables (–ø—É–Ω–∫—Ç—ã –¢–ó)
        if "deliverables" in data and data["deliverables"]:
            st.markdown("#### üìã –ü—É–Ω–∫—Ç—ã –¢–ó / –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã")
            st.caption("–ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –ë–ü–ú/–ë–ü–ê")

            for i, deliv in enumerate(data["deliverables"], 1):
                with st.expander(f"**{deliv.get('number', i)}.** {deliv['title']}", expanded=(i<=3)):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {deliv.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    if deliv.get('suggested_methodologies'):
                        st.markdown(f"**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏:** {', '.join(deliv['suggested_methodologies'])}")

        # Methodologies (–æ–±—â–∏–π —Å–ø–∏—Å–æ–∫)
        if "methodologies" in data and data["methodologies"]:
            st.markdown("#### üî¨ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ (–æ–±—â–∏–π —Å–ø–∏—Å–æ–∫)")
            st.caption("–ú–µ—Ç–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —É–ø–æ–º—è–Ω—É—Ç—ã–µ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ")
            methods_df = pd.DataFrame(data["methodologies"])
            st.dataframe(methods_df, use_container_width=True, hide_index=True)

        st.markdown("---")

        # Navigation buttons
        col1, col2, col3 = st.columns([1, 1, 3])
        with col1:
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.create_step = 1
                st.rerun()
        with col2:
            if st.button("‚û°Ô∏è –î–∞–ª–µ–µ", type="primary", use_container_width=True):
                st.session_state.create_step = 3
                st.rerun()
    else:
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 1, 3])
        with col1:
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.create_step = 1
                st.rerun()
        with col2:
            if st.button("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", use_container_width=True):
                st.session_state.create_step = 3
                st.rerun()


def show_step3_planning():
    """Step 3: Project planning - assign methodologies and dependencies"""
    st.subheader("–®–∞–≥ 3: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")

    # Check if we have extracted deliverables
    if not st.session_state.extracted_data or "deliverables" not in st.session_state.extracted_data:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –ø—É–Ω–∫—Ç–æ–≤ –¢–ó –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ 2 –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä.")
        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.create_step = 2
                st.rerun()
        return

    # Load all methodologies from database
    db = get_db()
    methodologies = db.query(Methodology).order_by(Methodology.category, Methodology.code).all()

    # Create methodology options for multiselect
    methodology_options = {f"{m.code}: {m.name}": m.code for m in methodologies}
    methodology_labels = list(methodology_options.keys())

    st.markdown("### üìã –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    st.caption("–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¢–ó –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ —É–∫–∞–∂–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")

    # Initialize planning data in session state if not exists
    if "planning_data" not in st.session_state:
        st.session_state.planning_data = {}

    deliverables = st.session_state.extracted_data["deliverables"]

    # Create deliverable options for dependency selection
    deliverable_options = ["–ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"] + [
        f"{d.get('number', i)}: {d['title'][:50]}"
        for i, d in enumerate(deliverables, 1)
    ]

    # Dependency types
    dependency_types = {
        "FS (Finish-to-Start)": "FS",
        "SS (Start-to-Start)": "SS",
        "FF (Finish-to-Finish)": "FF",
        "SF (Start-to-Finish)": "SF"
    }

    st.markdown("---")

    # Display each deliverable with planning controls
    for i, deliv in enumerate(deliverables):
        deliv_key = f"deliv_{i}"

        with st.expander(f"**{deliv.get('number', i+1)}.** {deliv['title']}", expanded=True):
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {deliv.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

            if deliv.get('suggested_methodologies'):
                st.caption(f"üí° AI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç: {', '.join(deliv['suggested_methodologies'])}")

            # Initialize planning data for this deliverable
            if deliv_key not in st.session_state.planning_data:
                # Pre-select suggested methodologies if available
                suggested = deliv.get('suggested_methodologies', [])
                preselected = [label for label in methodology_labels
                              if any(code in label for code in suggested)]

                st.session_state.planning_data[deliv_key] = {
                    "methodologies": preselected,
                    "dependencies": []  # List of {predecessor_idx, dependency_type}
                }

            # Methodology multiselect
            selected_labels = st.multiselect(
                "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –ë–ü–ú/–ë–ü–ê/–ë–ü–í",
                options=methodology_labels,
                default=st.session_state.planning_data[deliv_key]["methodologies"],
                key=f"methodologies_{i}",
                help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¢–ó"
            )
            st.session_state.planning_data[deliv_key]["methodologies"] = selected_labels

            # Show selected methodologies codes
            if selected_labels:
                selected_codes = [methodology_options[label] for label in selected_labels]
                st.caption(f"‚úì –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏: {', '.join(selected_codes)}")

            st.markdown("**–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á:**")

            # Show existing dependencies
            dependencies = st.session_state.planning_data[deliv_key]["dependencies"]

            if dependencies:
                for dep_idx, dep in enumerate(dependencies):
                    col1, col2, col3 = st.columns([2, 1, 1])
                    with col1:
                        pred_idx = st.selectbox(
                            "–ü—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞",
                            options=range(len(deliverable_options)),
                            format_func=lambda x: deliverable_options[x],
                            index=dep["predecessor_idx"],
                            key=f"dep_pred_{i}_{dep_idx}",
                            label_visibility="collapsed"
                        )
                        dep["predecessor_idx"] = pred_idx

                    with col2:
                        if pred_idx > 0:
                            dep_type_label = st.selectbox(
                                "–¢–∏–ø —Å–≤—è–∑–∏",
                                options=list(dependency_types.keys()),
                                index=list(dependency_types.values()).index(dep["dependency_type"]),
                                key=f"dep_type_{i}_{dep_idx}",
                                label_visibility="collapsed"
                            )
                            dep["dependency_type"] = dependency_types[dep_type_label]
                        else:
                            st.caption("_–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É_")

                    with col3:
                        if st.button("üóëÔ∏è", key=f"del_dep_{i}_{dep_idx}", help="–£–¥–∞–ª–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"):
                            dependencies.pop(dep_idx)
                            st.rerun()
            else:
                st.caption("_–ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π_")

            # Add new dependency button
            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", key=f"add_dep_{i}"):
                dependencies.append({"predecessor_idx": 0, "dependency_type": "FS"})
                st.rerun()

    st.markdown("---")

    # Navigation buttons
    col1, col2, col3 = st.columns([1, 1, 3])
    with col1:
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
            st.session_state.create_step = 2
            st.rerun()
    with col2:
        if st.button("‚û°Ô∏è –î–∞–ª–µ–µ", type="primary", use_container_width=True):
            st.session_state.create_step = 4
            st.rerun()


def show_step4_review_create():
    """Step 4: Review all data and create project"""
    st.subheader("–®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ")

    # Show summary
    st.markdown("### üìã –°–≤–æ–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")

    data = st.session_state.project_data

    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}")
        st.markdown(f"**–ö–ª–∏–µ–Ω—Ç:** {data['client']}")
        st.markdown(f"**Project Code:** `{data['project_code']}`")
    with col2:
        st.markdown(f"**–°—Ç–∞—Ä—Ç:** {data['start_date'].strftime('%d.%m.%Y')}")
        st.markdown(f"**–û–∫–æ–Ω—á–∞–Ω–∏–µ:** {data['end_date'].strftime('%d.%m.%Y')}")

    # Show extracted data if available
    if st.session_state.extracted_data:
        st.markdown("### üí∞ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞")
        extracted = st.session_state.extracted_data

        col1, col2, col3 = st.columns(3)
        with col1:
            if "budget" in extracted:
                st.metric("–ë—é–¥–∂–µ—Ç", f"{extracted['budget']['total']:,.0f} {extracted['budget']['currency']}")
        with col2:
            if "deliverables" in extracted:
                st.metric("–ü—É–Ω–∫—Ç–æ–≤ –¢–ó", len(extracted['deliverables']))
        with col3:
            if "methodologies" in extracted:
                st.metric("–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π", len(extracted['methodologies']))

        if "payment_stages" in extracted:
            st.caption(f"üìå –≠—Ç–∞–ø–æ–≤ –æ–ø–ª–∞—Ç—ã: {len(extracted.get('payment_stages', []))}")

    st.markdown("---")

    # Create button
    col1, col2, col3 = st.columns([1, 1, 3])
    with col1:
        if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", use_container_width=True):
            st.session_state.create_step = 3
            st.rerun()
    with col2:
        if st.button("‚úÖ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", type="primary", use_container_width=True):
            with st.spinner("–°–æ–∑–¥–∞—é –ø—Ä–æ–µ–∫—Ç..."):
                try:
                    db = get_db()

                    # Create project
                    extracted = st.session_state.extracted_data or {}
                    budget = extracted.get("budget", {})
                    duration = extracted.get("duration", {})

                    new_project = Project(
                        project_code=data["project_code"],
                        name=data["name"],
                        client=data["client"],
                        contract_signed_date=data.get("contract_signed_date"),
                        prepayment_date=data["start_date"],  # Day 0 = start_date
                        start_date=data["start_date"],
                        end_date=data["end_date"],
                        payment_scenario=data.get("payment_scenario", "thirds"),
                        status="draft",
                        group=data["group"],
                        project_type=data["project_type"],
                        budget_total=budget.get("total"),
                        budget_currency=budget.get("currency", "RUB"),
                        vat_included=budget.get("vat_included", True),
                        vat_rate=budget.get("vat_rate", 5),
                        duration_weeks=duration.get("weeks"),
                        sales_notes=data.get("sales_notes"),
                        project_specifics=data.get("project_specifics"),
                        created_by="admin"
                    )

                    db.add(new_project)
                    db.flush()  # Get project ID

                    # Add contract document if uploaded
                    if "contract_text" in data:
                        doc = ProjectDocument(
                            project_id=new_project.id,
                            type="contract",
                            file_name=data.get("contract_filename", "contract.txt"),
                            extracted_text=data["contract_text"],
                            ai_extracted_data=extracted,
                            ai_processing_status="completed",
                            ai_confidence_score=extracted.get("confidence_score", 0),
                            processed_at=datetime.utcnow()
                        )
                        db.add(doc)

                    # Add proposal document if uploaded
                    if "proposal_filename" in data:
                        proposal_doc = ProjectDocument(
                            project_id=new_project.id,
                            type="proposal",
                            file_name=data["proposal_filename"],
                            ai_processing_status="pending"
                        )
                        db.add(proposal_doc)

                    # Add payment stages
                    if "payment_stages" in extracted:
                        for stage in extracted["payment_stages"]:
                            payment = PaymentStage(
                                project_id=new_project.id,
                                stage_number=stage["stage_number"],
                                amount=stage["amount"],
                                description=stage.get("description"),
                                trigger=stage.get("trigger"),
                                is_from_contract=True
                            )
                            db.add(payment)

                    # Add deliverables (–ø—É–Ω–∫—Ç—ã –¢–ó) with planning data
                    created_deliverables = []
                    if "deliverables" in extracted:
                        # Get planning data and methodology mapping
                        planning_data = st.session_state.get("planning_data", {})
                        methodology_options = {f"{m.code}: {m.name}": m.code for m in db.query(Methodology).all()}

                        for i, deliv in enumerate(extracted["deliverables"]):
                            deliv_key = f"deliv_{i}"

                            # Get selected methodologies from planning data
                            selected_methodologies = []
                            if deliv_key in planning_data:
                                selected_labels = planning_data[deliv_key].get("methodologies", [])
                                selected_methodologies = [methodology_options[label] for label in selected_labels if label in methodology_options]

                            deliverable = Deliverable(
                                project_id=new_project.id,
                                number=deliv.get("number"),
                                title=deliv["title"],
                                description=deliv.get("description"),
                                suggested_methodologies=deliv.get("suggested_methodologies", []),
                                selected_methodologies=selected_methodologies,
                                is_from_contract=True
                            )
                            db.add(deliverable)
                            db.flush()  # Get ID for dependency creation
                            created_deliverables.append((i, deliverable))

                        # Create task dependencies (multiple dependencies per task)
                        for i, deliverable in created_deliverables:
                            deliv_key = f"deliv_{i}"
                            if deliv_key in planning_data:
                                dependencies = planning_data[deliv_key].get("dependencies", [])
                                for dep in dependencies:
                                    predecessor_idx = dep.get("predecessor_idx", 0)
                                    if predecessor_idx > 0:  # 0 means no dependency
                                        # predecessor_idx is 1-based (0 is "no dependency", 1 is first deliverable, etc.)
                                        predecessor_deliv_idx = predecessor_idx - 1
                                        if 0 <= predecessor_deliv_idx < len(created_deliverables):
                                            predecessor_deliv = created_deliverables[predecessor_deliv_idx][1]
                                            dependency_type = dep.get("dependency_type", "FS")

                                            task_dependency = TaskDependency(
                                                project_id=new_project.id,
                                                predecessor_id=predecessor_deliv.id,
                                                successor_id=deliverable.id,
                                                dependency_type=dependency_type,
                                                lag_days=0
                                            )
                                            db.add(task_dependency)

                    # Add methodologies
                    if "methodologies" in extracted:
                        for meth in extracted["methodologies"]:
                            # Find methodology by code
                            methodology = db.query(Methodology).filter(Methodology.code == meth["code"]).first()
                            if methodology:
                                selection = MethodologySelection(
                                    project_id=new_project.id,
                                    methodology_id=methodology.id,
                                    is_selected=True,
                                    is_from_contract=True,
                                    quantity=meth.get("quantity"),
                                    details=meth.get("details")
                                )
                                db.add(selection)

                    # Create Setup Checklist items
                    for item_template in SETUP_CHECKLIST_ITEMS:
                        checklist_item = SetupChecklistItem(
                            project_id=new_project.id,
                            item_number=item_template["item_number"],
                            title=item_template["title"],
                            description=item_template["description"]
                        )
                        db.add(checklist_item)

                    # Generate project structure and documents with GDrive sync
                    with st.spinner("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–¥–º–∏–Ω—à–∫–∞–ª—É –∏ PERT..."):
                        try:
                            generator = get_project_generator()
                            claude_client = get_claude_client()

                            # Try to initialize Google Drive client
                            gdrive_client = None
                            try:
                                gdrive_client = get_google_drive_client()
                            except Exception as gdrive_error:
                                st.warning(f"‚ö†Ô∏è Google Drive –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(gdrive_error)}\n–ü—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –≤ Obsidian Vault")

                            # Create project with dual sync
                            result = generator.create_project_with_gdrive_sync(
                                data,
                                extracted,
                                claude_client,
                                gdrive_client
                            )

                            # Update project with paths and links
                            new_project.obsidian_path = result['obsidian_path']

                            if result.get('google_drive'):
                                new_project.google_drive_folder_id = result['google_drive']['folder_id']
                                new_project.google_drive_folder_url = result['google_drive']['folder_url']

                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –ë–î, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã: {str(e)}")
                            result = None

                    # Single commit after all operations
                    db.commit()

                    # Refresh object to access attributes after commit
                    db.refresh(new_project)

                    db.close()

                    st.success(f"üéâ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω! Project code: {new_project.project_code}")

                    # Show created files and locations
                    if result:
                        files = result.get('files', {})
                        project_folder_name = result['obsidian_path'].split('/')[-1]

                        st.info(f"üìÅ **–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã –≤ Obsidian:**\n"
                                f"- –ê–¥–º–∏–Ω—à–∫–∞–ª–∞: `{files.get('adminscale', 'N/A').name if 'adminscale' in files else 'N/A'}`\n"
                                f"- PERT –¥–ª—è xMind: `{files.get('pert', 'N/A').name if 'pert' in files else 'N/A'}`\n"
                                f"- README: `{files.get('readme', 'N/A').name if 'readme' in files else 'N/A'}`\n"
                                f"\nüìÇ –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: `{project_folder_name}`")

                        # Show Google Drive links if available
                        if result.get('google_drive'):
                            gdrive_url = result['google_drive']['folder_url']
                            st.success(f"‚òÅÔ∏è **–ü—Ä–æ–µ–∫—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Google Drive:**\n"
                                      f"[–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ Google Drive]({gdrive_url})")
                        elif result.get('google_drive_error'):
                            st.warning(f"‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Drive –Ω–µ —É–¥–∞–ª–∞—Å—å: {result['google_drive_error']}")

                    # Clear session state
                    st.session_state.create_step = 1
                    st.session_state.project_data = {}
                    st.session_state.extracted_data = None

                    st.info("üëâ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")

                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")
                    db.rollback()
                    db.close()


def show_statistics():
    """Show statistics dashboard"""
    st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")

    db = get_db()

    # Get stats
    total_projects = db.query(Project).count()
    draft_count = db.query(Project).filter(Project.status == "draft").count()
    active_count = db.query(Project).filter(Project.status == "active").count()
    completed_count = db.query(Project).filter(Project.status == "completed").count()

    db.close()

    # Metrics
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", total_projects, help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
    with col2:
        st.metric("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏", draft_count, help="–ü—Ä–æ–µ–∫—Ç—ã –≤ —Å—Ç–∞—Ç—É—Å–µ draft")
    with col3:
        st.metric("–í —Ä–∞–±–æ—Ç–µ", active_count, help="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")
    with col4:
        st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", completed_count, help="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")

    st.divider()

    # Excel Import Section
    st.subheader("üì• –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Excel")

    with st.expander("–ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"):
        st.markdown("""
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–µ—Å—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞.

        **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:**
        - –õ–∏—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: –ù–∞–∑–≤–∞–Ω–∏–µ, –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–∞–ø–∫—É, –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞, –∏ —Ç.–¥.
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ `B2c. –§–æ—Ä–º—É–ª—è—Ä.xlsx` —Å –ª–∏—Å—Ç–æ–º ` –ë—É—Ñ–µ—Ä—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ`
        """)

        # File upload
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
            type=["xlsx", "xls"],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"
        )

        # Group selection for import
        import_group = st.selectbox(
            "–ì—Ä—É–ø–ø–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤",
            options=["right", "left"],
            format_func=lambda x: "–ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞" if x == "right" else "–õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞",
            help="–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É"
        )

        if uploaded_file:
            # Save uploaded file temporarily
            import tempfile
            import os
            from api.excel_import import preview_excel_import, import_projects_from_excel

            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_path = tmp_file.name

            try:
                # Preview data
                st.info("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞:")
                preview_df = preview_excel_import(tmp_path)
                st.dataframe(preview_df.head(10), use_container_width=True)
                st.caption(f"–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É: {len(preview_df)}")

                # Import button
                if st.button("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", type="primary"):
                    with st.spinner("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã..."):
                        db = get_db()
                        stats = import_projects_from_excel(
                            tmp_path,
                            sheet_name=' –ë—É—Ñ–µ—Ä—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ',
                            db_session=db,
                            default_group=import_group
                        )
                        db.close()

                    # Show results
                    st.success(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {stats['imported']}")
                    if stats['skipped'] > 0:
                        st.warning(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {stats['skipped']}")

                    if stats['errors']:
                        with st.expander("‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞"):
                            for error in stats['errors']:
                                st.error(error)

                    if stats['imported'] > 0:
                        st.info("üëâ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É '–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã' —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            finally:
                # Clean up temp file
                if os.path.exists(tmp_path):
                    os.unlink(tmp_path)

    # Charts will be added in future versions
    st.divider()
    st.info("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")


if __name__ == "__main__":
    # Load authentication config
    config = load_auth_config()

    # Create authenticator
    authenticator = stauth.Authenticate(
        config['credentials'],
        config['cookie']['name'],
        config['cookie']['key'],
        config['cookie']['expiry_days']
    )

    # Login widget
    name, authentication_status, username = authenticator.login('–í—Ö–æ–¥', 'main')

    if authentication_status:
        # User is authenticated
        authenticator.logout('–í—ã—Ö–æ–¥', 'sidebar')

        # Show user info in sidebar
        with st.sidebar:
            st.write(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{name}*!')
            st.markdown("---")

        # Run main application
        main()

    elif authentication_status == False:
        st.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    elif authentication_status == None:
        st.warning('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å')
